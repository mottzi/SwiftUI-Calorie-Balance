<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>top-level-items</key>
	<array>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>85</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>85</string>
					<key>Timestamp</key>
					<string>724605377.972748</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SwiftTest/Cards/BalanceCard.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>            .fontDesign(.rounded)
            
</string>
				<key>trailing</key>
				<string>            if DataViewModel.Data.calBalanceNow - Int(AppSettings.balanceGoal) &gt;= 0
            {
                ZStack
</string>
			</dict>
			<key>title</key>
			<string>goal logic hardcoded</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>88</string>
					<key>StartingColumnNumber</key>
					<string>88</string>
					<key>StartingLineNumber</key>
					<string>87</string>
					<key>Timestamp</key>
					<string>724605443.665989</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SwiftTest/Cards/PrognosisCard.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>
</string>
				<key>leading</key>
				<string>            .fontDesign(.rounded)
            
            if DataViewModel.Data.calBalanceMidnight - Int(AppSettings.balanceGoal) &gt;= 0</string>
				<key>trailing</key>
				<string>            {
                ZStack
                {
</string>
			</dict>
			<key>title</key>
			<string>goal logic hardcoded</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>20</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>19</string>
					<key>Timestamp</key>
					<string>731542500.433983</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SwiftTest/Views/CircleBalanceGraph.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>    var passiveFuture: Int { mode == .midnight ? max(DataViewModel.Data.calBurnedPassiveAvg - DataViewModel.Data.calBurnedPassive, 0) : 0 }
</string>
				<key>leading</key>
				<string>    let mode: GraphMode
    
</string>
				<key>trailing</key>
				<string>    
    var maxNow: Int { max(DataViewModel.Data.calBurnedActive + DataViewModel.Data.calBurnedPassive, DataViewModel.Data.calConsumed) }
    var maxMidnight: Int { max((AppSettings.dataSource == .apple ? DataViewModel.Data.calBurnedActive : DataViewModel.Data.calBurnedActiveAvg) + DataViewModel.Data.calBurnedPassive + passiveFuture, DataViewModel.Data.calConsumed) }
</string>
			</dict>
			<key>title</key>
			<string>pot. redundant ? :</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>92</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>91</string>
					<key>Timestamp</key>
					<string>725495394.7239749</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SwiftTest/Data/HealthDataViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>    @MainActor
</string>
				<key>leading</key>
				<string>    }
    
</string>
				<key>trailing</key>
				<string>    func clearData() async
    {
        Data.calBurnedActive = 0
</string>
			</dict>
			<key>title</key>
			<string>unsure if this needs async and or mainactor</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>30</string>
					<key>EndingLineNumber</key>
					<string>32</string>
					<key>StartingColumnNumber</key>
					<string>16</string>
					<key>StartingLineNumber</key>
					<string>32</string>
					<key>Timestamp</key>
					<string>725479432.286334</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>BalancePrognosisCard.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>.offset(y: 35)</string>
				<key>leading</key>
				<string>            PageSelector(firstIcon: "sun.max.fill", secondIcon: "moon.fill", pickedColor: Color("TextColor").opacity(0.8), unpickedColor: Color("TextColor").opacity(0.2), iconFontSize: 16, bgColor: .clear, bgColorSelected: getBackGround(AppSettings.bgMode), selection: todayPageMode)
                .frame(width: 100, height: 35)
                </string>
				<key>trailing</key>
				<string>
        }
    }
</string>
			</dict>
			<key>title</key>
			<string>stale after lazy disappear fix</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>8</string>
					<key>EndingLineNumber</key>
					<string>32</string>
					<key>StartingColumnNumber</key>
					<string>8</string>
					<key>StartingLineNumber</key>
					<string>32</string>
					<key>Timestamp</key>
					<string>725886023.352429</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Abstract/WeightDataViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string></string>
				<key>leading</key>
				<string>        
        var returnData: [WeightChartData] = []
    </string>
				<key>trailing</key>
				<string>
        for index in (WeightData.count - 1 - 6) ... WeightData.count - 1
        {
</string>
			</dict>
			<key>title</key>
			<string>.last = today, not up2date</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>53</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>52</string>
					<key>Timestamp</key>
					<string>731938253.071323</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SwiftTest/WeightCard/MonthlyChart.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>            .chartXScale(domain: WeightViewModel.WeightData.first!.date ... WeightViewModel.WeightData.last!.date.nextSunday.tomorrow)
</string>
				<key>leading</key>
				<string>            .chartYScale(domain: WeightViewModel.getYRange(.monthly))
            .chartYAxis { AxisMarks(position: .trailing, values: WeightViewModel.createYRangeArray(.monthly)) }
</string>
				<key>trailing</key>
				<string>            .chartXAxis
            {
                AxisMarks(values: .stride(by: .day, count: 7))
</string>
			</dict>
			<key>title</key>
			<string>test range generator (MO/SO + next week)</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>51</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>50</string>
					<key>Timestamp</key>
					<string>725886274.380355</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Abstract/WeightDataViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        for index in (WeightData.count - 1 - 29) ... WeightData.count - 1
</string>
				<key>leading</key>
				<string>        var data: [WeightChartData] = []
        
</string>
				<key>trailing</key>
				<string>        {
            data.append(WeightData[index])
        }
</string>
			</dict>
			<key>title</key>
			<string>30 or 29?</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>331</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>330</string>
					<key>Timestamp</key>
					<string>738840185.178146</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SwiftTest/Pager.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>                
</string>
				<key>leading</key>
				<string>                    await newPage.updateMetrics(cache: false)
                }
</string>
				<key>trailing</key>
				<string>                // Reset data of old page. Data will reload (from cache) on next selection. This ensures new load animations.
//                await oldPage?.clearData()
            }
</string>
			</dict>
			<key>title</key>
			<string>cache off </string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>56</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>55</string>
					<key>Timestamp</key>
					<string>731889679.445477</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SwiftTest/Dashboard/PrognosisCard/PrognosisCard.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        {
</string>
				<key>leading</key>
				<string>    {
        VStack(spacing: 0)
</string>
				<key>trailing</key>
				<string>            TopRowRight.padding(.top, 2)
            
            BarBalanceGraphMidnight(
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>44</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>43</string>
					<key>Timestamp</key>
					<string>727272044.0106781</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SwiftTest/Dashboard/BalancePrognosisCard.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>        .transaction 
</string>
				<key>leading</key>
				<string>        .scrollIndicators(.hidden)
        .scrollPosition(id: $todayPageMode)
</string>
				<key>trailing</key>
				<string>        {
            if $0.scrollToToday
            {
</string>
			</dict>
			<key>title</key>
			<string>today-button animation gltch fix</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>257</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>256</string>
					<key>Timestamp</key>
					<string>731764389.403177</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>TestWidget/Widgets/BalanceWidgetCircle.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>    var topGraph: some View
</string>
				<key>leading</key>
				<string>    }
    
</string>
				<key>trailing</key>
				<string>    {
        HStack(spacing: 0)
        {
</string>
			</dict>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>34</string>
					<key>EndingLineNumber</key>
					<string>95</string>
					<key>StartingColumnNumber</key>
					<string>30</string>
					<key>StartingLineNumber</key>
					<string>95</string>
					<key>Timestamp</key>
					<string>727882728.941916</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>Abstract/HealthDataViewModel.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>data</string>
				<key>leading</key>
				<string>        }
        
        // save a copy of new </string>
				<key>trailing</key>
				<string> to cache
        var c = HealthData.empty(for: self.Data.referenceDate)
        
</string>
			</dict>
			<key>title</key>
			<string>not yet adapted to support watchMode == 1</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
		<dict>
			<key>destination</key>
			<dict>
				<key>location-parameters</key>
				<dict>
					<key>EndingColumnNumber</key>
					<string>0</string>
					<key>EndingLineNumber</key>
					<string>292</string>
					<key>StartingColumnNumber</key>
					<string>0</string>
					<key>StartingLineNumber</key>
					<string>291</string>
					<key>Timestamp</key>
					<string>738840185.178207</string>
				</dict>
				<key>rebasable-url</key>
				<dict>
					<key>base</key>
					<string>workspace</string>
					<key>payload</key>
					<dict>
						<key>relative-path</key>
						<string>SwiftTest/Pager.swift</string>
					</dict>
				</dict>
			</dict>
			<key>text-context</key>
			<dict>
				<key>focused</key>
				<string>                })
</string>
				<key>leading</key>
				<string>                            transaction.animation = nil
                        }
</string>
				<key>trailing</key>
				<string>            }
            
            ToolbarItem(placement: .topBarTrailing)
</string>
			</dict>
			<key>title</key>
			<string>randomizer</string>
			<key>type</key>
			<string>bookmark</string>
		</dict>
	</array>
</dict>
</plist>
